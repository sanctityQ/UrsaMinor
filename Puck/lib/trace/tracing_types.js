//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.AnnotationType = {
  'BOOL' : 0,
  'BYTES' : 1,
  'I16' : 2,
  'I32' : 3,
  'I64' : 4,
  'DOUBLE' : 5,
  'STRING' : 6
};
Endpoint = module.exports.Endpoint = function(args) {
  this.ipv4 = null;
  this.port = null;
  this.service_name = null;
  if (args) {
    if (args.ipv4 !== undefined && args.ipv4 !== null) {
      this.ipv4 = args.ipv4;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.service_name !== undefined && args.service_name !== null) {
      this.service_name = args.service_name;
    }
  }
};
Endpoint.prototype = {};
Endpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ipv4 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.port = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.service_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Endpoint.prototype.write = function(output) {
  output.writeStructBegin('Endpoint');
  if (this.ipv4 !== null && this.ipv4 !== undefined) {
    output.writeFieldBegin('ipv4', Thrift.Type.I32, 1);
    output.writeI32(this.ipv4);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I16, 2);
    output.writeI16(this.port);
    output.writeFieldEnd();
  }
  if (this.service_name !== null && this.service_name !== undefined) {
    output.writeFieldBegin('service_name', Thrift.Type.STRING, 3);
    output.writeString(this.service_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotation = module.exports.Annotation = function(args) {
  this.timestamp = null;
  this.value = null;
  this.host = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = new ttypes.Endpoint(args.host);
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.Endpoint();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 3);
    this.host.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BinaryAnnotation = module.exports.BinaryAnnotation = function(args) {
  this.key = null;
  this.value = null;
  this.annotation_type = null;
  this.host = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.annotation_type !== undefined && args.annotation_type !== null) {
      this.annotation_type = args.annotation_type;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = new ttypes.Endpoint(args.host);
    }
  }
};
BinaryAnnotation.prototype = {};
BinaryAnnotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.annotation_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.Endpoint();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BinaryAnnotation.prototype.write = function(output) {
  output.writeStructBegin('BinaryAnnotation');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.annotation_type !== null && this.annotation_type !== undefined) {
    output.writeFieldBegin('annotation_type', Thrift.Type.I32, 3);
    output.writeI32(this.annotation_type);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 4);
    this.host.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Span = module.exports.Span = function(args) {
  this.trace_id = null;
  this.name = null;
  this.id = null;
  this.parent_id = null;
  this.annotations = null;
  this.binary_annotations = null;
  this.debug = null;
  if (args) {
    if (args.trace_id !== undefined && args.trace_id !== null) {
      this.trace_id = args.trace_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.parent_id !== undefined && args.parent_id !== null) {
      this.parent_id = args.parent_id;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [ttypes.Annotation]);
    }
    if (args.binary_annotations !== undefined && args.binary_annotations !== null) {
      this.binary_annotations = Thrift.copyList(args.binary_annotations, [ttypes.BinaryAnnotation]);
    }
    if (args.debug !== undefined && args.debug !== null) {
      this.debug = args.debug;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.trace_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.parent_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.annotations = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Annotation();
          elem6.read(input);
          this.annotations.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.binary_annotations = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.BinaryAnnotation();
          elem13.read(input);
          this.binary_annotations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.debug = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.trace_id !== null && this.trace_id !== undefined) {
    output.writeFieldBegin('trace_id', Thrift.Type.I64, 1);
    output.writeI64(this.trace_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 4);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.parent_id !== null && this.parent_id !== undefined) {
    output.writeFieldBegin('parent_id', Thrift.Type.I64, 5);
    output.writeI64(this.parent_id);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter14 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter14))
      {
        iter14 = this.annotations[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binary_annotations !== null && this.binary_annotations !== undefined) {
    output.writeFieldBegin('binary_annotations', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.binary_annotations.length);
    for (var iter15 in this.binary_annotations)
    {
      if (this.binary_annotations.hasOwnProperty(iter15))
      {
        iter15 = this.binary_annotations[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debug !== null && this.debug !== undefined) {
    output.writeFieldBegin('debug', Thrift.Type.BOOL, 9);
    output.writeBool(this.debug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientId = module.exports.ClientId = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ClientId.prototype = {};
ClientId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientId.prototype.write = function(output) {
  output.writeStructBegin('ClientId');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestContext = module.exports.RequestContext = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
RequestContext.prototype = {};
RequestContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestContext.prototype.write = function(output) {
  output.writeStructBegin('RequestContext');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeBinary(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Delegation = module.exports.Delegation = function(args) {
  this.src = null;
  this.dst = null;
  if (args) {
    if (args.src !== undefined && args.src !== null) {
      this.src = args.src;
    }
    if (args.dst !== undefined && args.dst !== null) {
      this.dst = args.dst;
    }
  }
};
Delegation.prototype = {};
Delegation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.src = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dst = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Delegation.prototype.write = function(output) {
  output.writeStructBegin('Delegation');
  if (this.src !== null && this.src !== undefined) {
    output.writeFieldBegin('src', Thrift.Type.STRING, 1);
    output.writeString(this.src);
    output.writeFieldEnd();
  }
  if (this.dst !== null && this.dst !== undefined) {
    output.writeFieldBegin('dst', Thrift.Type.STRING, 2);
    output.writeString(this.dst);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RequestHeader = module.exports.RequestHeader = function(args) {
  this.trace_id = null;
  this.span_id = null;
  this.parent_span_id = null;
  this.sampled = null;
  this.client_id = null;
  this.flags = null;
  this.contexts = null;
  this.dest = null;
  this.delegations = null;
  if (args) {
    if (args.trace_id !== undefined && args.trace_id !== null) {
      this.trace_id = args.trace_id;
    }
    if (args.span_id !== undefined && args.span_id !== null) {
      this.span_id = args.span_id;
    }
    if (args.parent_span_id !== undefined && args.parent_span_id !== null) {
      this.parent_span_id = args.parent_span_id;
    }
    if (args.sampled !== undefined && args.sampled !== null) {
      this.sampled = args.sampled;
    }
    if (args.client_id !== undefined && args.client_id !== null) {
      this.client_id = new ttypes.ClientId(args.client_id);
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.contexts !== undefined && args.contexts !== null) {
      this.contexts = args.contexts;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.delegations !== undefined && args.delegations !== null) {
      this.delegations = args.delegations;
    }
  }
};
RequestHeader.prototype = {};
RequestHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.trace_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.span_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.parent_span_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sampled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.client_id = new ttypes.ClientId();
        this.client_id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.flags = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.contexts = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.RequestContext();
          elem22.read(input);
          this.contexts.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.delegations = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new ttypes.Delegation();
          elem29.read(input);
          this.delegations.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestHeader.prototype.write = function(output) {
  output.writeStructBegin('RequestHeader');
  if (this.trace_id !== null && this.trace_id !== undefined) {
    output.writeFieldBegin('trace_id', Thrift.Type.I64, 1);
    output.writeI64(this.trace_id);
    output.writeFieldEnd();
  }
  if (this.span_id !== null && this.span_id !== undefined) {
    output.writeFieldBegin('span_id', Thrift.Type.I64, 2);
    output.writeI64(this.span_id);
    output.writeFieldEnd();
  }
  if (this.parent_span_id !== null && this.parent_span_id !== undefined) {
    output.writeFieldBegin('parent_span_id', Thrift.Type.I64, 3);
    output.writeI64(this.parent_span_id);
    output.writeFieldEnd();
  }
  if (this.sampled !== null && this.sampled !== undefined) {
    output.writeFieldBegin('sampled', Thrift.Type.BOOL, 5);
    output.writeBool(this.sampled);
    output.writeFieldEnd();
  }
  if (this.client_id !== null && this.client_id !== undefined) {
    output.writeFieldBegin('client_id', Thrift.Type.STRUCT, 6);
    this.client_id.write(output);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I64, 7);
    output.writeI64(this.flags);
    output.writeFieldEnd();
  }
  if (this.contexts !== null && this.contexts !== undefined) {
    output.writeFieldBegin('contexts', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.contexts.length);
    for (var iter30 in this.contexts)
    {
      if (this.contexts.hasOwnProperty(iter30))
      {
        iter30 = this.contexts[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 9);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.delegations !== null && this.delegations !== undefined) {
    output.writeFieldBegin('delegations', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.delegations.length);
    for (var iter31 in this.delegations)
    {
      if (this.delegations.hasOwnProperty(iter31))
      {
        iter31 = this.delegations[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResponseHeader = module.exports.ResponseHeader = function(args) {
  this.spans = null;
  this.contexts = null;
  if (args) {
    if (args.spans !== undefined && args.spans !== null) {
      this.spans = Thrift.copyList(args.spans, [ttypes.Span]);
    }
    if (args.contexts !== undefined && args.contexts !== null) {
      this.contexts = Thrift.copyList(args.contexts, [ttypes.RequestContext]);
    }
  }
};
ResponseHeader.prototype = {};
ResponseHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.spans = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Span();
          elem38.read(input);
          this.spans.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.contexts = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.RequestContext();
          elem45.read(input);
          this.contexts.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResponseHeader.prototype.write = function(output) {
  output.writeStructBegin('ResponseHeader');
  if (this.spans !== null && this.spans !== undefined) {
    output.writeFieldBegin('spans', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
    for (var iter46 in this.spans)
    {
      if (this.spans.hasOwnProperty(iter46))
      {
        iter46 = this.spans[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contexts !== null && this.contexts !== undefined) {
    output.writeFieldBegin('contexts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.contexts.length);
    for (var iter47 in this.contexts)
    {
      if (this.contexts.hasOwnProperty(iter47))
      {
        iter47 = this.contexts[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConnectionOptions = module.exports.ConnectionOptions = function(args) {
};
ConnectionOptions.prototype = {};
ConnectionOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConnectionOptions.prototype.write = function(output) {
  output.writeStructBegin('ConnectionOptions');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeReply = module.exports.UpgradeReply = function(args) {
};
UpgradeReply.prototype = {};
UpgradeReply.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeReply.prototype.write = function(output) {
  output.writeStructBegin('UpgradeReply');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.CLIENT_SEND = 'cs';
ttypes.CLIENT_RECV = 'cr';
ttypes.SERVER_SEND = 'ss';
ttypes.SERVER_RECV = 'sr';
ttypes.WIRE_SEND = 'ws';
ttypes.WIRE_RECV = 'wr';
ttypes.CLIENT_SEND_FRAGMENT = 'csf';
ttypes.CLIENT_RECV_FRAGMENT = 'crf';
ttypes.SERVER_SEND_FRAGMENT = 'ssf';
ttypes.SERVER_RECV_FRAGMENT = 'srf';
ttypes.CLIENT_ADDR = 'ca';
ttypes.SERVER_ADDR = 'sa';
