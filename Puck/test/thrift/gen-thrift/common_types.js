//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ErrorCode = {
  'SERVICE_ERROR' : 10001,
  'USER_NOTFUND' : 20101,
  'LOAN_NOTFUND' : 20201,
  'FUND_ACCOUNT_NOTFUND' : 20301,
  'INTERACT_REBATERULE_CONFIG_ERROR' : 20401,
  'INTERACT_REBATERULE_NOTMATCH' : 20402,
  'INTERACT_REBATE_INVITER_ERROR' : 20403,
  'INTERACT_REBATE_REPAIR_ERROR' : 20404,
  'INTERACT_INVITE_RELATION_BIND_ERROR' : 20405,
  'INTERACT_REBATE_INVALID' : 20406,
  'INTERACT_REBATE_INVITER_NOTFUND' : 20407,
  'INTERACT_REBATE_TYPE_ERROR' : 20408,
  'INTERACT_REBATE_BATCH_REVISE_ERROR' : 20409
};
ttypes.Direction = {
  'ASC' : 0,
  'DESC' : 1
};
P2PException = module.exports.P2PException = function(args) {
  Thrift.TException.call(this, "P2PException")
  this.name = "P2PException"
  this.errorCode = null;
  this.errorMsg = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMsg !== undefined && args.errorMsg !== null) {
      this.errorMsg = args.errorMsg;
    }
  }
};
Thrift.inherits(P2PException, Thrift.TException);
P2PException.prototype.name = 'P2PException';
P2PException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errorMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

P2PException.prototype.write = function(output) {
  output.writeStructBegin('P2PException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMsg !== null && this.errorMsg !== undefined) {
    output.writeFieldBegin('errorMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errorMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OrderInfo = module.exports.OrderInfo = function(args) {
  this.direction = null;
  this.colName = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.colName !== undefined && args.colName !== null) {
      this.colName = args.colName;
    }
  }
};
OrderInfo.prototype = {};
OrderInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.colName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderInfo.prototype.write = function(output) {
  output.writeStructBegin('OrderInfo');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 1);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.colName !== null && this.colName !== undefined) {
    output.writeFieldBegin('colName', Thrift.Type.STRING, 2);
    output.writeString(this.colName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PageInfo = module.exports.PageInfo = function(args) {
  this.pageNum = null;
  this.pageSize = null;
  this.sort = null;
  if (args) {
    if (args.pageNum !== undefined && args.pageNum !== null) {
      this.pageNum = args.pageNum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pageNum is unset!');
    }
    if (args.pageSize !== undefined && args.pageSize !== null) {
      this.pageSize = args.pageSize;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pageSize is unset!');
    }
    if (args.sort !== undefined && args.sort !== null) {
      this.sort = Thrift.copyList(args.sort, [ttypes.OrderInfo]);
    }
  }
};
PageInfo.prototype = {};
PageInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pageNum = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.sort = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.OrderInfo();
          elem6.read(input);
          this.sort.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PageInfo.prototype.write = function(output) {
  output.writeStructBegin('PageInfo');
  if (this.pageNum !== null && this.pageNum !== undefined) {
    output.writeFieldBegin('pageNum', Thrift.Type.I32, 1);
    output.writeI32(this.pageNum);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 2);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  if (this.sort !== null && this.sort !== undefined) {
    output.writeFieldBegin('sort', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.sort.length);
    for (var iter7 in this.sort)
    {
      if (this.sort.hasOwnProperty(iter7))
      {
        iter7 = this.sort[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Duration = module.exports.Duration = function(args) {
  this.days = null;
  this.months = null;
  this.years = null;
  if (args) {
    if (args.days !== undefined && args.days !== null) {
      this.days = args.days;
    }
    if (args.months !== undefined && args.months !== null) {
      this.months = args.months;
    }
    if (args.years !== undefined && args.years !== null) {
      this.years = args.years;
    }
  }
};
Duration.prototype = {};
Duration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.days = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.months = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.years = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Duration.prototype.write = function(output) {
  output.writeStructBegin('Duration');
  if (this.days !== null && this.days !== undefined) {
    output.writeFieldBegin('days', Thrift.Type.I32, 1);
    output.writeI32(this.days);
    output.writeFieldEnd();
  }
  if (this.months !== null && this.months !== undefined) {
    output.writeFieldBegin('months', Thrift.Type.I32, 2);
    output.writeI32(this.months);
    output.writeFieldEnd();
  }
  if (this.years !== null && this.years !== undefined) {
    output.writeFieldBegin('years', Thrift.Type.I32, 3);
    output.writeI32(this.years);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

