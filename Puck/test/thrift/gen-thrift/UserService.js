//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types')


var ttypes = require('./user_types');
//HELPER FUNCTIONS AND STRUCTURES

UserService_findCorporationUserByIds_args = function(args) {
  this.userIds = null;
  if (args) {
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userIds is unset!');
    }
  }
};
UserService_findCorporationUserByIds_args.prototype = {};
UserService_findCorporationUserByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.userIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.userIds.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findCorporationUserByIds_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findCorporationUserByIds_args');
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter15 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter15))
      {
        iter15 = this.userIds[iter15];
        output.writeString(iter15);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findCorporationUserByIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserNameAndIdInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findCorporationUserByIds_result.prototype = {};
UserService_findCorporationUserByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.UserNameAndIdInfo();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findCorporationUserByIds_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findCorporationUserByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserNameAndIdByName_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
UserService_findUserNameAndIdByName_args.prototype = {};
UserService_findUserNameAndIdByName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserNameAndIdByName_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserNameAndIdByName_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserNameAndIdByName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserNameAndIdInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserNameAndIdByName_result.prototype = {};
UserService_findUserNameAndIdByName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.UserNameAndIdInfo();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserNameAndIdByName_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserNameAndIdByName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserNameAndIdByUserIds_args = function(args) {
  this.userIds = null;
  if (args) {
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userIds is unset!');
    }
  }
};
UserService_findUserNameAndIdByUserIds_args.prototype = {};
UserService_findUserNameAndIdByUserIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size32 = 0;
        var _rtmp336;
        this.userIds = [];
        var _etype35 = 0;
        _rtmp336 = input.readSetBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.userIds.push(elem38);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserNameAndIdByUserIds_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserNameAndIdByUserIds_args');
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter39 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter39))
      {
        iter39 = this.userIds[iter39];
        output.writeString(iter39);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserNameAndIdByUserIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserNameAndIdInfo]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserNameAndIdByUserIds_result.prototype = {};
UserService_findUserNameAndIdByUserIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.UserNameAndIdInfo();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserNameAndIdByUserIds_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserNameAndIdByUserIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
UserService_findUserById_args.prototype = {};
UserService_findUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserById_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserById_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserById_result.prototype = {};
UserService_findUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserById_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByMobile_args = function(args) {
  this.mobile = null;
  if (args) {
    if (args.mobile !== undefined && args.mobile !== null) {
      this.mobile = args.mobile;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mobile is unset!');
    }
  }
};
UserService_findUserByMobile_args.prototype = {};
UserService_findUserByMobile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByMobile_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByMobile_args');
  if (this.mobile !== null && this.mobile !== undefined) {
    output.writeFieldBegin('mobile', Thrift.Type.STRING, 1);
    output.writeString(this.mobile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByMobile_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserByMobile_result.prototype = {};
UserService_findUserByMobile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByMobile_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByMobile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByLoginName_args = function(args) {
  this.loginName = null;
  if (args) {
    if (args.loginName !== undefined && args.loginName !== null) {
      this.loginName = args.loginName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field loginName is unset!');
    }
  }
};
UserService_findUserByLoginName_args.prototype = {};
UserService_findUserByLoginName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByLoginName_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByLoginName_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByLoginName_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserByLoginName_result.prototype = {};
UserService_findUserByLoginName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByLoginName_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByLoginName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listUserByIds_args = function(args) {
  this.ids = null;
  this.dimPrivacy = true;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.dimPrivacy !== undefined && args.dimPrivacy !== null) {
      this.dimPrivacy = args.dimPrivacy;
    }
  }
};
UserService_listUserByIds_args.prototype = {};
UserService_listUserByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size48 = 0;
        var _rtmp352;
        this.ids = [];
        var _etype51 = 0;
        _rtmp352 = input.readSetBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString();
          this.ids.push(elem54);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dimPrivacy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listUserByIds_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_listUserByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter55 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter55))
      {
        iter55 = this.ids[iter55];
        output.writeString(iter55);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.dimPrivacy !== null && this.dimPrivacy !== undefined) {
    output.writeFieldBegin('dimPrivacy', Thrift.Type.BOOL, 2);
    output.writeBool(this.dimPrivacy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listUserByIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.User]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_listUserByIds_result.prototype = {};
UserService_listUserByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.User();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listUserByIds_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_listUserByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listUserByQuery_args = function(args) {
  this.pageInfo = null;
  this.queryType = null;
  this.value = null;
  if (args) {
    if (args.pageInfo !== undefined && args.pageInfo !== null) {
      this.pageInfo = new common_ttypes.PageInfo(args.pageInfo);
    }
    if (args.queryType !== undefined && args.queryType !== null) {
      this.queryType = args.queryType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field queryType is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
UserService_listUserByQuery_args.prototype = {};
UserService_listUserByQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageInfo = new common_ttypes.PageInfo();
        this.pageInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listUserByQuery_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_listUserByQuery_args');
  if (this.pageInfo !== null && this.pageInfo !== undefined) {
    output.writeFieldBegin('pageInfo', Thrift.Type.STRUCT, 1);
    this.pageInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.queryType !== null && this.queryType !== undefined) {
    output.writeFieldBegin('queryType', Thrift.Type.I32, 2);
    output.writeI32(this.queryType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listUserByQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserPage(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_listUserByQuery_result.prototype = {};
UserService_listUserByQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserPage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listUserByQuery_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_listUserByQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findGroupById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
UserService_findGroupById_args.prototype = {};
UserService_findGroupById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findGroupById_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findGroupById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findGroupById_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserGroup(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findGroupById_result.prototype = {};
UserService_findGroupById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findGroupById_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findGroupById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listGroupByIds_args = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
  }
};
UserService_listGroupByIds_args.prototype = {};
UserService_listGroupByIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size64 = 0;
        var _rtmp368;
        this.ids = [];
        var _etype67 = 0;
        _rtmp368 = input.readSetBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.ids.push(elem70);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listGroupByIds_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_listGroupByIds_args');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.ids.length);
    for (var iter71 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter71))
      {
        iter71 = this.ids[iter71];
        output.writeString(iter71);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listGroupByIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserGroup]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_listGroupByIds_result.prototype = {};
UserService_listGroupByIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.UserGroup();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listGroupByIds_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_listGroupByIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listAllGroup_args = function(args) {
  this.groupType = null;
  if (args) {
    if (args.groupType !== undefined && args.groupType !== null) {
      this.groupType = args.groupType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field groupType is unset!');
    }
  }
};
UserService_listAllGroup_args.prototype = {};
UserService_listAllGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.groupType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listAllGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_listAllGroup_args');
  if (this.groupType !== null && this.groupType !== undefined) {
    output.writeFieldBegin('groupType', Thrift.Type.I32, 1);
    output.writeI32(this.groupType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_listAllGroup_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.UserGroup]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_listAllGroup_result.prototype = {};
UserService_listAllGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.UserGroup();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_listAllGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_listAllGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_initUser_args = function(args) {
  this.userInit = null;
  if (args) {
    if (args.userInit !== undefined && args.userInit !== null) {
      this.userInit = new ttypes.UserInit(args.userInit);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userInit is unset!');
    }
  }
};
UserService_initUser_args.prototype = {};
UserService_initUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userInit = new ttypes.UserInit();
        this.userInit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_initUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_initUser_args');
  if (this.userInit !== null && this.userInit !== undefined) {
    output.writeFieldBegin('userInit', Thrift.Type.STRUCT, 1);
    this.userInit.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_initUser_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_initUser_result.prototype = {};
UserService_initUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_initUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_initUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByPassportId_args = function(args) {
  this.passportId = null;
  if (args) {
    if (args.passportId !== undefined && args.passportId !== null) {
      this.passportId = args.passportId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field passportId is unset!');
    }
  }
};
UserService_findUserByPassportId_args.prototype = {};
UserService_findUserByPassportId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.passportId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByPassportId_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByPassportId_args');
  if (this.passportId !== null && this.passportId !== undefined) {
    output.writeFieldBegin('passportId', Thrift.Type.I64, 1);
    output.writeI64(this.passportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_findUserByPassportId_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof common_ttypes.P2PException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.User(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
UserService_findUserByPassportId_result.prototype = {};
UserService_findUserByPassportId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new common_ttypes.P2PException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_findUserByPassportId_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_findUserByPassportId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var tracing = require("./tracing_types");
UserService___can__finagle__trace__v3___result = function(args) {
  this.success = new tracing.UpgradeReply();
};
UserService___can__finagle__trace__v3___result.prototype = {};
UserService___can__finagle__trace__v3___result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    this.success = new tracing.UpgradeReply();
    this.success.read(input);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};
UserService___can__finagle__trace__v3___result.prototype.write = function(output) {
  output.writeStructBegin('UserService___can__finagle__trace__v3___result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.seqid = function() { return this._seqid; }
UserServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }

UserServiceClient.prototype.__can__finagle__trace__v3__ = function() {
  this._seqid = this.new_seqid();
  var output = new this.pClass(this.output);
  // var _defer = Q.defer();
  // this._reqs[0] = function(error, result) {
  //   if (error) {
  //     _defer.reject(error);
  //   } else {
  //     _defer.resolve(result);
  //   }
  // };
  output.writeMessageBegin('__can__finagle__trace__v3__', Thrift.MessageType.CALL, 0);
  output.writeMessageEnd();
  this.output.flush();
};

UserServiceClient.prototype.recv___can__finagle__trace__v3__ = function(input,mtype,rseqid) {
  var callback = function(res) {
    console.log(res)
  };
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService___can__finagle__trace__v3___result();
  result.read(input);
  input.readMessageEnd();
  callback(result.success)
};


UserServiceClient.prototype.findCorporationUserByIds = function(userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findCorporationUserByIds(userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findCorporationUserByIds(userIds);
  }
};

UserServiceClient.prototype.send_findCorporationUserByIds = function(userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findCorporationUserByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findCorporationUserByIds_args();
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findCorporationUserByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findCorporationUserByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findCorporationUserByIds failed: unknown result');
};
UserServiceClient.prototype.findUserNameAndIdByName = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserNameAndIdByName(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserNameAndIdByName(name);
  }
};

UserServiceClient.prototype.send_findUserNameAndIdByName = function(name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserNameAndIdByName', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserNameAndIdByName_args();
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserNameAndIdByName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserNameAndIdByName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserNameAndIdByName failed: unknown result');
};
UserServiceClient.prototype.findUserNameAndIdByUserIds = function(userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserNameAndIdByUserIds(userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserNameAndIdByUserIds(userIds);
  }
};

UserServiceClient.prototype.send_findUserNameAndIdByUserIds = function(userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserNameAndIdByUserIds', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserNameAndIdByUserIds_args();
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserNameAndIdByUserIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserNameAndIdByUserIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserNameAndIdByUserIds failed: unknown result');
};

UserServiceClient.prototype.findUserById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserById(id);
  }
};

UserServiceClient.prototype.send_findUserById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserById', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserById failed: unknown result');
};
UserServiceClient.prototype.findUserByMobile = function(mobile, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserByMobile(mobile);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserByMobile(mobile);
  }
};

UserServiceClient.prototype.send_findUserByMobile = function(mobile) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserByMobile', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserByMobile_args();
  args.mobile = mobile;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserByMobile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserByMobile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserByMobile failed: unknown result');
};
UserServiceClient.prototype.findUserByLoginName = function(loginName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserByLoginName(loginName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserByLoginName(loginName);
  }
};

UserServiceClient.prototype.send_findUserByLoginName = function(loginName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserByLoginName', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserByLoginName_args();
  args.loginName = loginName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserByLoginName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserByLoginName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserByLoginName failed: unknown result');
};
UserServiceClient.prototype.listUserByIds = function(ids, dimPrivacy, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserByIds(ids, dimPrivacy);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserByIds(ids, dimPrivacy);
  }
};

UserServiceClient.prototype.send_listUserByIds = function(ids, dimPrivacy) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_listUserByIds_args();
  args.ids = ids;
  args.dimPrivacy = dimPrivacy;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_listUserByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_listUserByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserByIds failed: unknown result');
};
UserServiceClient.prototype.listUserByQuery = function(pageInfo, queryType, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listUserByQuery(pageInfo, queryType, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listUserByQuery(pageInfo, queryType, value);
  }
};

UserServiceClient.prototype.send_listUserByQuery = function(pageInfo, queryType, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listUserByQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_listUserByQuery_args();
  args.pageInfo = pageInfo;
  args.queryType = queryType;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_listUserByQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_listUserByQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listUserByQuery failed: unknown result');
};
UserServiceClient.prototype.findGroupById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findGroupById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findGroupById(id);
  }
};

UserServiceClient.prototype.send_findGroupById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findGroupById', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findGroupById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findGroupById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findGroupById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findGroupById failed: unknown result');
};
UserServiceClient.prototype.listGroupByIds = function(ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listGroupByIds(ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listGroupByIds(ids);
  }
};

UserServiceClient.prototype.send_listGroupByIds = function(ids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listGroupByIds', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_listGroupByIds_args();
  args.ids = ids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_listGroupByIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_listGroupByIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listGroupByIds failed: unknown result');
};
UserServiceClient.prototype.listAllGroup = function(groupType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listAllGroup(groupType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listAllGroup(groupType);
  }
};

UserServiceClient.prototype.send_listAllGroup = function(groupType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listAllGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_listAllGroup_args();
  args.groupType = groupType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_listAllGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_listAllGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listAllGroup failed: unknown result');
};
UserServiceClient.prototype.initUser = function(userInit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_initUser(userInit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_initUser(userInit);
  }
};

UserServiceClient.prototype.send_initUser = function(userInit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('initUser', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_initUser_args();
  args.userInit = userInit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_initUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_initUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('initUser failed: unknown result');
};
UserServiceClient.prototype.findUserByPassportId = function(passportId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findUserByPassportId(passportId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findUserByPassportId(passportId);
  }
};

UserServiceClient.prototype.send_findUserByPassportId = function(passportId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findUserByPassportId', Thrift.MessageType.CALL, this.seqid());
  var args = new UserService_findUserByPassportId_args();
  args.passportId = passportId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_findUserByPassportId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_findUserByPassportId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findUserByPassportId failed: unknown result');
};
UserServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
UserServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

UserServiceProcessor.prototype.process_findCorporationUserByIds = function(seqid, input, output) {
  var args = new UserService_findCorporationUserByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findCorporationUserByIds.length === 1) {
    Q.fcall(this._handler.findCorporationUserByIds, args.userIds)
      .then(function(result) {
        var result = new UserService_findCorporationUserByIds_result({success: result});
        output.writeMessageBegin("findCorporationUserByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findCorporationUserByIds_result(err);
          output.writeMessageBegin("findCorporationUserByIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCorporationUserByIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findCorporationUserByIds(args.userIds, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findCorporationUserByIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findCorporationUserByIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findCorporationUserByIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserNameAndIdByName = function(seqid, input, output) {
  var args = new UserService_findUserNameAndIdByName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserNameAndIdByName.length === 1) {
    Q.fcall(this._handler.findUserNameAndIdByName, args.name)
      .then(function(result) {
        var result = new UserService_findUserNameAndIdByName_result({success: result});
        output.writeMessageBegin("findUserNameAndIdByName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserNameAndIdByName_result(err);
          output.writeMessageBegin("findUserNameAndIdByName", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserNameAndIdByName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserNameAndIdByName(args.name, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserNameAndIdByName_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserNameAndIdByName", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserNameAndIdByName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserNameAndIdByUserIds = function(seqid, input, output) {
  var args = new UserService_findUserNameAndIdByUserIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserNameAndIdByUserIds.length === 1) {
    Q.fcall(this._handler.findUserNameAndIdByUserIds, args.userIds)
      .then(function(result) {
        var result = new UserService_findUserNameAndIdByUserIds_result({success: result});
        output.writeMessageBegin("findUserNameAndIdByUserIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserNameAndIdByUserIds_result(err);
          output.writeMessageBegin("findUserNameAndIdByUserIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserNameAndIdByUserIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserNameAndIdByUserIds(args.userIds, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserNameAndIdByUserIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserNameAndIdByUserIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserNameAndIdByUserIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserById = function(seqid, input, output) {
  var args = new UserService_findUserById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserById.length === 1) {
    Q.fcall(this._handler.findUserById, args.id)
      .then(function(result) {
        var result = new UserService_findUserById_result({success: result});
        output.writeMessageBegin("findUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserById_result(err);
          output.writeMessageBegin("findUserById", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserById(args.id, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserByMobile = function(seqid, input, output) {
  var args = new UserService_findUserByMobile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserByMobile.length === 1) {
    Q.fcall(this._handler.findUserByMobile, args.mobile)
      .then(function(result) {
        var result = new UserService_findUserByMobile_result({success: result});
        output.writeMessageBegin("findUserByMobile", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserByMobile_result(err);
          output.writeMessageBegin("findUserByMobile", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserByMobile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserByMobile(args.mobile, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserByMobile_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserByMobile", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserByMobile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserByLoginName = function(seqid, input, output) {
  var args = new UserService_findUserByLoginName_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserByLoginName.length === 1) {
    Q.fcall(this._handler.findUserByLoginName, args.loginName)
      .then(function(result) {
        var result = new UserService_findUserByLoginName_result({success: result});
        output.writeMessageBegin("findUserByLoginName", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserByLoginName_result(err);
          output.writeMessageBegin("findUserByLoginName", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserByLoginName", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserByLoginName(args.loginName, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserByLoginName_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserByLoginName", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserByLoginName", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_listUserByIds = function(seqid, input, output) {
  var args = new UserService_listUserByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserByIds.length === 2) {
    Q.fcall(this._handler.listUserByIds, args.ids, args.dimPrivacy)
      .then(function(result) {
        var result = new UserService_listUserByIds_result({success: result});
        output.writeMessageBegin("listUserByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_listUserByIds_result(err);
          output.writeMessageBegin("listUserByIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserByIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserByIds(args.ids, args.dimPrivacy, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_listUserByIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserByIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserByIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_listUserByQuery = function(seqid, input, output) {
  var args = new UserService_listUserByQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listUserByQuery.length === 3) {
    Q.fcall(this._handler.listUserByQuery, args.pageInfo, args.queryType, args.value)
      .then(function(result) {
        var result = new UserService_listUserByQuery_result({success: result});
        output.writeMessageBegin("listUserByQuery", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_listUserByQuery_result(err);
          output.writeMessageBegin("listUserByQuery", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listUserByQuery", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listUserByQuery(args.pageInfo, args.queryType, args.value, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_listUserByQuery_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listUserByQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listUserByQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findGroupById = function(seqid, input, output) {
  var args = new UserService_findGroupById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findGroupById.length === 1) {
    Q.fcall(this._handler.findGroupById, args.id)
      .then(function(result) {
        var result = new UserService_findGroupById_result({success: result});
        output.writeMessageBegin("findGroupById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findGroupById_result(err);
          output.writeMessageBegin("findGroupById", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findGroupById", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findGroupById(args.id, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findGroupById_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findGroupById", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findGroupById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_listGroupByIds = function(seqid, input, output) {
  var args = new UserService_listGroupByIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listGroupByIds.length === 1) {
    Q.fcall(this._handler.listGroupByIds, args.ids)
      .then(function(result) {
        var result = new UserService_listGroupByIds_result({success: result});
        output.writeMessageBegin("listGroupByIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_listGroupByIds_result(err);
          output.writeMessageBegin("listGroupByIds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listGroupByIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listGroupByIds(args.ids, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_listGroupByIds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listGroupByIds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listGroupByIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_listAllGroup = function(seqid, input, output) {
  var args = new UserService_listAllGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listAllGroup.length === 1) {
    Q.fcall(this._handler.listAllGroup, args.groupType)
      .then(function(result) {
        var result = new UserService_listAllGroup_result({success: result});
        output.writeMessageBegin("listAllGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_listAllGroup_result(err);
          output.writeMessageBegin("listAllGroup", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listAllGroup", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listAllGroup(args.groupType, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_listAllGroup_result((err != null ? err : {success: result}));
        output.writeMessageBegin("listAllGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listAllGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_initUser = function(seqid, input, output) {
  var args = new UserService_initUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.initUser.length === 1) {
    Q.fcall(this._handler.initUser, args.userInit)
      .then(function(result) {
        var result = new UserService_initUser_result({success: result});
        output.writeMessageBegin("initUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_initUser_result(err);
          output.writeMessageBegin("initUser", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("initUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.initUser(args.userInit, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_initUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("initUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("initUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

UserServiceProcessor.prototype.process_findUserByPassportId = function(seqid, input, output) {
  var args = new UserService_findUserByPassportId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findUserByPassportId.length === 1) {
    Q.fcall(this._handler.findUserByPassportId, args.passportId)
      .then(function(result) {
        var result = new UserService_findUserByPassportId_result({success: result});
        output.writeMessageBegin("findUserByPassportId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof common_ttypes.P2PException) {
          var result = new UserService_findUserByPassportId_result(err);
          output.writeMessageBegin("findUserByPassportId", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findUserByPassportId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findUserByPassportId(args.passportId, function (err, result) {
      if (err == null || err instanceof common_ttypes.P2PException) {
        var result = new UserService_findUserByPassportId_result((err != null ? err : {success: result}));
        output.writeMessageBegin("findUserByPassportId", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findUserByPassportId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}


